import cv2
import os
import imutils
import numpy as np
import pandas as pd
import datetime
import time

# Counter for images
def count_pictures(k):
    try:
        float(k)
        return True
    except ValueError:
        pass

    try:
        import unicodedata
        unicodedata.numeric(k)
        return True
    except (TypeError, ValueError):
        pass

        return False

print("Camera on")
captureDevice = cv2.VideoCapture(0)
captureDevice.set(3, 650)  # Sets the camera width
captureDevice.set(4, 480)  # Sets the camera height

print("Files read")
#self.checkCascade()
ID = input("Input user ID:   ")
if (count_pictures(ID)):
    faceCascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    counter = 0
    print("Detect #1")
    while True:
        ret, frame = captureDevice.read()

        #For now this will convert the frames to grey scale
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        #print("Convert function #2")
        # detects the frames for different sizes
        faces = faceCascade.detectMultiScale(gray, 1.3, 5)
        # This will loop for every single student
        #print("Loop is about to start")
        for (x, y, w, h) in faces:
            print(x, y, w, h)
            # Crop the photo frame into a rectangle
            #If faces found
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
            # add the sample number
            counter = counter + 1
            # Save the face into the folder
            cv2.imwrite("Dataset/" + os.sep + ID +".jpg", gray[y:y + h, x:x + w])
            # Showcase the frame

        cv2.imshow('Frame', frame)
        # Wait for only 80 milli
        if cv2.waitKey(1) & 0xFF == ord('f'):
            cv2.destroyAllWindows()
            break
                # So this will break if the pictures are more than 100
        elif counter > 200:  # decreased the pictures due to scalability issues
            break


captureDevice.release()